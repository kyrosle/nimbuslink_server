// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rendezvous.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:nimbus.RegisterPeer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPeer {
    // message fields
    // @@protoc_insertion_point(field:nimbus.RegisterPeer.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:nimbus.RegisterPeer.serial)
    pub serial: i32,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.RegisterPeer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPeer {
    fn default() -> &'a RegisterPeer {
        <RegisterPeer as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeer {
    pub fn new() -> RegisterPeer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPeer| { &m.id },
            |m: &mut RegisterPeer| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &RegisterPeer| { &m.serial },
            |m: &mut RegisterPeer| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeer>(
            "RegisterPeer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPeer {
    const NAME: &'static str = "RegisterPeer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.serial = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.serial);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.serial != 0 {
            os.write_int32(2, self.serial)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPeer {
        RegisterPeer::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.serial = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPeer {
        static instance: RegisterPeer = RegisterPeer {
            id: ::std::string::String::new(),
            serial: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPeer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPeer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPeer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.RegisterPeerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPeerResponse {
    // message fields
    // @@protoc_insertion_point(field:nimbus.RegisterPeerResponse.request_pk)
    pub request_pk: bool,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.RegisterPeerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPeerResponse {
    fn default() -> &'a RegisterPeerResponse {
        <RegisterPeerResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeerResponse {
    pub fn new() -> RegisterPeerResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_pk",
            |m: &RegisterPeerResponse| { &m.request_pk },
            |m: &mut RegisterPeerResponse| { &mut m.request_pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeerResponse>(
            "RegisterPeerResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPeerResponse {
    const NAME: &'static str = "RegisterPeerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.request_pk = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.request_pk != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.request_pk != false {
            os.write_bool(2, self.request_pk)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPeerResponse {
        RegisterPeerResponse::new()
    }

    fn clear(&mut self) {
        self.request_pk = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPeerResponse {
        static instance: RegisterPeerResponse = RegisterPeerResponse {
            request_pk: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPeerResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPeerResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPeerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeerResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.RegisterPk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPk {
    // message fields
    // @@protoc_insertion_point(field:nimbus.RegisterPk.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:nimbus.RegisterPk.uuid)
    pub uuid: ::bytes::Bytes,
    // @@protoc_insertion_point(field:nimbus.RegisterPk.pk)
    pub pk: ::bytes::Bytes,
    // @@protoc_insertion_point(field:nimbus.RegisterPk.old_id)
    pub old_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.RegisterPk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPk {
    fn default() -> &'a RegisterPk {
        <RegisterPk as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPk {
    pub fn new() -> RegisterPk {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPk| { &m.id },
            |m: &mut RegisterPk| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RegisterPk| { &m.uuid },
            |m: &mut RegisterPk| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &RegisterPk| { &m.pk },
            |m: &mut RegisterPk| { &mut m.pk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "old_id",
            |m: &RegisterPk| { &m.old_id },
            |m: &mut RegisterPk| { &mut m.old_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPk>(
            "RegisterPk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPk {
    const NAME: &'static str = "RegisterPk";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.uuid = is.read_tokio_bytes()?;
                },
                26 => {
                    self.pk = is.read_tokio_bytes()?;
                },
                34 => {
                    self.old_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuid);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.pk);
        }
        if !self.old_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.old_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.uuid.is_empty() {
            os.write_bytes(2, &self.uuid)?;
        }
        if !self.pk.is_empty() {
            os.write_bytes(3, &self.pk)?;
        }
        if !self.old_id.is_empty() {
            os.write_string(4, &self.old_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPk {
        RegisterPk::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.uuid.clear();
        self.pk.clear();
        self.old_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPk {
        static instance: RegisterPk = RegisterPk {
            id: ::std::string::String::new(),
            uuid: ::bytes::Bytes::new(),
            pk: ::bytes::Bytes::new(),
            old_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.RegisterPkResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterPkResponse {
    // message fields
    // @@protoc_insertion_point(field:nimbus.RegisterPkResponse.result)
    pub result: ::protobuf::EnumOrUnknown<register_pk_response::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.RegisterPkResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPkResponse {
    fn default() -> &'a RegisterPkResponse {
        <RegisterPkResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPkResponse {
    pub fn new() -> RegisterPkResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &RegisterPkResponse| { &m.result },
            |m: &mut RegisterPkResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPkResponse>(
            "RegisterPkResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPkResponse {
    const NAME: &'static str = "RegisterPkResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPkResponse {
        RegisterPkResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPkResponse {
        static instance: RegisterPkResponse = RegisterPkResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPkResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPkResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPkResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RegisterPkResponse`
pub mod register_pk_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:nimbus.RegisterPkResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.OK)
        OK = 0,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.UUID_MISMATCH)
        UUID_MISMATCH = 2,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.ID_EXISTS)
        ID_EXISTS = 3,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.TOO_FREQUENT)
        TOO_FREQUENT = 4,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.INVALID_ID_FORMAT)
        INVALID_ID_FORMAT = 5,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.NOT_SUPPORT)
        NOT_SUPPORT = 6,
        // @@protoc_insertion_point(enum_value:nimbus.RegisterPkResponse.Result.SERVER_ERROR)
        SERVER_ERROR = 7,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::OK),
                2 => ::std::option::Option::Some(Result::UUID_MISMATCH),
                3 => ::std::option::Option::Some(Result::ID_EXISTS),
                4 => ::std::option::Option::Some(Result::TOO_FREQUENT),
                5 => ::std::option::Option::Some(Result::INVALID_ID_FORMAT),
                6 => ::std::option::Option::Some(Result::NOT_SUPPORT),
                7 => ::std::option::Option::Some(Result::SERVER_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "OK" => ::std::option::Option::Some(Result::OK),
                "UUID_MISMATCH" => ::std::option::Option::Some(Result::UUID_MISMATCH),
                "ID_EXISTS" => ::std::option::Option::Some(Result::ID_EXISTS),
                "TOO_FREQUENT" => ::std::option::Option::Some(Result::TOO_FREQUENT),
                "INVALID_ID_FORMAT" => ::std::option::Option::Some(Result::INVALID_ID_FORMAT),
                "NOT_SUPPORT" => ::std::option::Option::Some(Result::NOT_SUPPORT),
                "SERVER_ERROR" => ::std::option::Option::Some(Result::SERVER_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::OK,
            Result::UUID_MISMATCH,
            Result::ID_EXISTS,
            Result::TOO_FREQUENT,
            Result::INVALID_ID_FORMAT,
            Result::NOT_SUPPORT,
            Result::SERVER_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("RegisterPkResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Result::OK => 0,
                Result::UUID_MISMATCH => 1,
                Result::ID_EXISTS => 2,
                Result::TOO_FREQUENT => 3,
                Result::INVALID_ID_FORMAT => 4,
                Result::NOT_SUPPORT => 5,
                Result::SERVER_ERROR => 6,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::OK
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("RegisterPkResponse.Result")
        }
    }
}

// @@protoc_insertion_point(message:nimbus.PunchHole)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PunchHole {
    // message fields
    // @@protoc_insertion_point(field:nimbus.PunchHole.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:nimbus.PunchHole.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:nimbus.PunchHole.nat_type)
    pub nat_type: ::protobuf::EnumOrUnknown<NatType>,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.PunchHole.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PunchHole {
    fn default() -> &'a PunchHole {
        <PunchHole as ::protobuf::Message>::default_instance()
    }
}

impl PunchHole {
    pub fn new() -> PunchHole {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHole| { &m.socket_addr },
            |m: &mut PunchHole| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHole| { &m.relay_server },
            |m: &mut PunchHole| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHole| { &m.nat_type },
            |m: &mut PunchHole| { &mut m.nat_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHole>(
            "PunchHole",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PunchHole {
    const NAME: &'static str = "PunchHole";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.relay_server = is.read_string()?;
                },
                24 => {
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relay_server);
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::int32_size(3, self.nat_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(2, &self.relay_server)?;
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.nat_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PunchHole {
        PunchHole::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.relay_server.clear();
        self.nat_type = ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PunchHole {
        static instance: PunchHole = PunchHole {
            socket_addr: ::bytes::Bytes::new(),
            relay_server: ::std::string::String::new(),
            nat_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PunchHole {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PunchHole").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PunchHole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHole {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.ConfigUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConfigUpdate {
    // message fields
    // @@protoc_insertion_point(field:nimbus.ConfigUpdate.serial)
    pub serial: i32,
    // @@protoc_insertion_point(field:nimbus.ConfigUpdate.rendezvous_servers)
    pub rendezvous_servers: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.ConfigUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConfigUpdate {
    fn default() -> &'a ConfigUpdate {
        <ConfigUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ConfigUpdate {
    pub fn new() -> ConfigUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &ConfigUpdate| { &m.serial },
            |m: &mut ConfigUpdate| { &mut m.serial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rendezvous_servers",
            |m: &ConfigUpdate| { &m.rendezvous_servers },
            |m: &mut ConfigUpdate| { &mut m.rendezvous_servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConfigUpdate>(
            "ConfigUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConfigUpdate {
    const NAME: &'static str = "ConfigUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.serial = is.read_int32()?;
                },
                18 => {
                    self.rendezvous_servers.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.serial);
        }
        for value in &self.rendezvous_servers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        for v in &self.rendezvous_servers {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConfigUpdate {
        ConfigUpdate::new()
    }

    fn clear(&mut self) {
        self.serial = 0;
        self.rendezvous_servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConfigUpdate {
        static instance: ConfigUpdate = ConfigUpdate {
            serial: 0,
            rendezvous_servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConfigUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConfigUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConfigUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.TestNatRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestNatRequest {
    // message fields
    // @@protoc_insertion_point(field:nimbus.TestNatRequest.serial)
    pub serial: i32,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.TestNatRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestNatRequest {
    fn default() -> &'a TestNatRequest {
        <TestNatRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestNatRequest {
    pub fn new() -> TestNatRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &TestNatRequest| { &m.serial },
            |m: &mut TestNatRequest| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatRequest>(
            "TestNatRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestNatRequest {
    const NAME: &'static str = "TestNatRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.serial = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.serial);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestNatRequest {
        TestNatRequest::new()
    }

    fn clear(&mut self) {
        self.serial = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestNatRequest {
        static instance: TestNatRequest = TestNatRequest {
            serial: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestNatRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestNatRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestNatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.TestNatResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestNatResponse {
    // message fields
    // @@protoc_insertion_point(field:nimbus.TestNatResponse.port)
    pub port: i32,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.TestNatResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestNatResponse {
    fn default() -> &'a TestNatResponse {
        <TestNatResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestNatResponse {
    pub fn new() -> TestNatResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &TestNatResponse| { &m.port },
            |m: &mut TestNatResponse| { &mut m.port },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatResponse>(
            "TestNatResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestNatResponse {
    const NAME: &'static str = "TestNatResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.port = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.port);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.port != 0 {
            os.write_int32(1, self.port)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestNatResponse {
        TestNatResponse::new()
    }

    fn clear(&mut self) {
        self.port = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestNatResponse {
        static instance: TestNatResponse = TestNatResponse {
            port: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestNatResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestNatResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestNatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:nimbus.RendezvousMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RendezvousMessage {
    // message oneof groups
    pub union: ::std::option::Option<rendezvous_message::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:nimbus.RendezvousMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RendezvousMessage {
    fn default() -> &'a RendezvousMessage {
        <RendezvousMessage as ::protobuf::Message>::default_instance()
    }
}

impl RendezvousMessage {
    pub fn new() -> RendezvousMessage {
        ::std::default::Default::default()
    }

    // .nimbus.RegisterPeer register_peer = 6;

    pub fn register_peer(&self) -> &RegisterPeer {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(ref v)) => v,
            _ => <RegisterPeer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer(&mut self, v: RegisterPeer) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer(&mut self) -> &mut RegisterPeer {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(RegisterPeer::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer(&mut self) -> RegisterPeer {
        if self.has_register_peer() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeer::new()
        }
    }

    // .nimbus.RegisterPeerResponse register_peer_response = 7;

    pub fn register_peer_response(&self) -> &RegisterPeerResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(ref v)) => v,
            _ => <RegisterPeerResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer_response(&mut self, v: RegisterPeerResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer_response(&mut self) -> &mut RegisterPeerResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(RegisterPeerResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer_response(&mut self) -> RegisterPeerResponse {
        if self.has_register_peer_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeerResponse::new()
        }
    }

    // .nimbus.ConfigUpdate configure_update = 14;

    pub fn configure_update(&self) -> &ConfigUpdate {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ref v)) => v,
            _ => <ConfigUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_configure_update(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_configure_update(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_configure_update(&mut self, v: ConfigUpdate) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_configure_update(&mut self) -> &mut ConfigUpdate {
        if let ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ConfigUpdate::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_configure_update(&mut self) -> ConfigUpdate {
        if self.has_configure_update() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            ConfigUpdate::new()
        }
    }

    // .nimbus.RegisterPk register_pk = 15;

    pub fn register_pk(&self) -> &RegisterPk {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(ref v)) => v,
            _ => <RegisterPk as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk(&mut self, v: RegisterPk) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk(&mut self) -> &mut RegisterPk {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(RegisterPk::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk(&mut self) -> RegisterPk {
        if self.has_register_pk() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPk::new()
        }
    }

    // .nimbus.RegisterPkResponse register_pk_response = 16;

    pub fn register_pk_response(&self) -> &RegisterPkResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(ref v)) => v,
            _ => <RegisterPkResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk_response(&mut self, v: RegisterPkResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk_response(&mut self) -> &mut RegisterPkResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(RegisterPkResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk_response(&mut self) -> RegisterPkResponse {
        if self.has_register_pk_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPkResponse::new()
        }
    }

    // .nimbus.TestNatRequest test_nat_request = 20;

    pub fn test_nat_request(&self) -> &TestNatRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(ref v)) => v,
            _ => <TestNatRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_request(&mut self, v: TestNatRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_request(&mut self) -> &mut TestNatRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(TestNatRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_request(&mut self) -> TestNatRequest {
        if self.has_test_nat_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatRequest::new()
        }
    }

    // .nimbus.TestNatResponse test_nat_response = 21;

    pub fn test_nat_response(&self) -> &TestNatResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(ref v)) => v,
            _ => <TestNatResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_response(&mut self, v: TestNatResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_response(&mut self) -> &mut TestNatResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(TestNatResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_response(&mut self) -> TestNatResponse {
        if self.has_test_nat_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeer>(
            "register_peer",
            RendezvousMessage::has_register_peer,
            RendezvousMessage::register_peer,
            RendezvousMessage::mut_register_peer,
            RendezvousMessage::set_register_peer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeerResponse>(
            "register_peer_response",
            RendezvousMessage::has_register_peer_response,
            RendezvousMessage::register_peer_response,
            RendezvousMessage::mut_register_peer_response,
            RendezvousMessage::set_register_peer_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ConfigUpdate>(
            "configure_update",
            RendezvousMessage::has_configure_update,
            RendezvousMessage::configure_update,
            RendezvousMessage::mut_configure_update,
            RendezvousMessage::set_configure_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPk>(
            "register_pk",
            RendezvousMessage::has_register_pk,
            RendezvousMessage::register_pk,
            RendezvousMessage::mut_register_pk,
            RendezvousMessage::set_register_pk,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPkResponse>(
            "register_pk_response",
            RendezvousMessage::has_register_pk_response,
            RendezvousMessage::register_pk_response,
            RendezvousMessage::mut_register_pk_response,
            RendezvousMessage::set_register_pk_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatRequest>(
            "test_nat_request",
            RendezvousMessage::has_test_nat_request,
            RendezvousMessage::test_nat_request,
            RendezvousMessage::mut_test_nat_request,
            RendezvousMessage::set_test_nat_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatResponse>(
            "test_nat_response",
            RendezvousMessage::has_test_nat_response,
            RendezvousMessage::test_nat_response,
            RendezvousMessage::mut_test_nat_response,
            RendezvousMessage::set_test_nat_response,
        ));
        oneofs.push(rendezvous_message::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RendezvousMessage>(
            "RendezvousMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RendezvousMessage {
    const NAME: &'static str = "RendezvousMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(is.read_message()?));
                },
                58 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(is.read_message()?));
                },
                114 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(is.read_message()?));
                },
                122 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(is.read_message()?));
                },
                130 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(is.read_message()?));
                },
                162 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(is.read_message()?));
                },
                170 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::RegisterPeer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPeerResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::ConfigureUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPkResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::TestNatRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::TestNatResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::RegisterPeer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &rendezvous_message::Union::RegisterPeerResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rendezvous_message::Union::ConfigureUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &rendezvous_message::Union::RegisterPk(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rendezvous_message::Union::RegisterPkResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
                &rendezvous_message::Union::TestNatRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
                },
                &rendezvous_message::Union::TestNatResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RendezvousMessage {
        RendezvousMessage::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RendezvousMessage {
        static instance: RendezvousMessage = RendezvousMessage {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RendezvousMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RendezvousMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RendezvousMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RendezvousMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RendezvousMessage`
pub mod rendezvous_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:nimbus.RendezvousMessage.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.register_peer)
        RegisterPeer(super::RegisterPeer),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.register_peer_response)
        RegisterPeerResponse(super::RegisterPeerResponse),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.configure_update)
        ConfigureUpdate(super::ConfigUpdate),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.register_pk)
        RegisterPk(super::RegisterPk),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.register_pk_response)
        RegisterPkResponse(super::RegisterPkResponse),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.test_nat_request)
        TestNatRequest(super::TestNatRequest),
        // @@protoc_insertion_point(oneof_field:nimbus.RendezvousMessage.test_nat_response)
        TestNatResponse(super::TestNatResponse),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RendezvousMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:nimbus.NatType)
pub enum NatType {
    // @@protoc_insertion_point(enum_value:nimbus.NatType.UNKNOWN_NAT)
    UNKNOWN_NAT = 0,
    // @@protoc_insertion_point(enum_value:nimbus.NatType.ASYMMETRIC)
    ASYMMETRIC = 1,
    // @@protoc_insertion_point(enum_value:nimbus.NatType.SYMMETRIC)
    SYMMETRIC = 2,
}

impl ::protobuf::Enum for NatType {
    const NAME: &'static str = "NatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NatType> {
        match value {
            0 => ::std::option::Option::Some(NatType::UNKNOWN_NAT),
            1 => ::std::option::Option::Some(NatType::ASYMMETRIC),
            2 => ::std::option::Option::Some(NatType::SYMMETRIC),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<NatType> {
        match str {
            "UNKNOWN_NAT" => ::std::option::Option::Some(NatType::UNKNOWN_NAT),
            "ASYMMETRIC" => ::std::option::Option::Some(NatType::ASYMMETRIC),
            "SYMMETRIC" => ::std::option::Option::Some(NatType::SYMMETRIC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [NatType] = &[
        NatType::UNKNOWN_NAT,
        NatType::ASYMMETRIC,
        NatType::SYMMETRIC,
    ];
}

impl ::protobuf::EnumFull for NatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("NatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for NatType {
    fn default() -> Self {
        NatType::UNKNOWN_NAT
    }
}

impl NatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NatType>("NatType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10rendezvous.proto\x12\x06nimbus\"6\n\x0cRegisterPeer\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06serial\x18\x02\x20\x01(\x05R\
    \x06serial\"5\n\x14RegisterPeerResponse\x12\x1d\n\nrequest_pk\x18\x02\
    \x20\x01(\x08R\trequestPk\"W\n\nRegisterPk\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x12\n\x04uuid\x18\x02\x20\x01(\x0cR\x04uuid\x12\x0e\n\
    \x02pk\x18\x03\x20\x01(\x0cR\x02pk\x12\x15\n\x06old_id\x18\x04\x20\x01(\
    \tR\x05oldId\"\xcf\x01\n\x12RegisterPkResponse\x129\n\x06result\x18\x01\
    \x20\x01(\x0e2!.nimbus.RegisterPkResponse.ResultR\x06result\"~\n\x06Resu\
    lt\x12\x06\n\x02OK\x10\0\x12\x11\n\rUUID_MISMATCH\x10\x02\x12\r\n\tID_EX\
    ISTS\x10\x03\x12\x10\n\x0cTOO_FREQUENT\x10\x04\x12\x15\n\x11INVALID_ID_F\
    ORMAT\x10\x05\x12\x0f\n\x0bNOT_SUPPORT\x10\x06\x12\x10\n\x0cSERVER_ERROR\
    \x10\x07\"{\n\tPunchHole\x12\x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\
    \nsocketAddr\x12!\n\x0crelay_server\x18\x02\x20\x01(\tR\x0brelayServer\
    \x12*\n\x08nat_type\x18\x03\x20\x01(\x0e2\x0f.nimbus.NatTypeR\x07natType\
    \"U\n\x0cConfigUpdate\x12\x16\n\x06serial\x18\x01\x20\x01(\x05R\x06seria\
    l\x12-\n\x12rendezvous_servers\x18\x02\x20\x03(\tR\x11rendezvousServers\
    \"(\n\x0eTestNatRequest\x12\x16\n\x06serial\x18\x01\x20\x01(\x05R\x06ser\
    ial\"%\n\x0fTestNatResponse\x12\x12\n\x04port\x18\x01\x20\x01(\x05R\x04p\
    ort\"\x84\x04\n\x11RendezvousMessage\x12;\n\rregister_peer\x18\x06\x20\
    \x01(\x0b2\x14.nimbus.RegisterPeerH\0R\x0cregisterPeer\x12T\n\x16registe\
    r_peer_response\x18\x07\x20\x01(\x0b2\x1c.nimbus.RegisterPeerResponseH\0\
    R\x14registerPeerResponse\x12A\n\x10configure_update\x18\x0e\x20\x01(\
    \x0b2\x14.nimbus.ConfigUpdateH\0R\x0fconfigureUpdate\x125\n\x0bregister_\
    pk\x18\x0f\x20\x01(\x0b2\x12.nimbus.RegisterPkH\0R\nregisterPk\x12N\n\
    \x14register_pk_response\x18\x10\x20\x01(\x0b2\x1a.nimbus.RegisterPkResp\
    onseH\0R\x12registerPkResponse\x12B\n\x10test_nat_request\x18\x14\x20\
    \x01(\x0b2\x16.nimbus.TestNatRequestH\0R\x0etestNatRequest\x12E\n\x11tes\
    t_nat_response\x18\x15\x20\x01(\x0b2\x17.nimbus.TestNatResponseH\0R\x0ft\
    estNatResponseB\x07\n\x05union*9\n\x07NatType\x12\x0f\n\x0bUNKNOWN_NAT\
    \x10\0\x12\x0e\n\nASYMMETRIC\x10\x01\x12\r\n\tSYMMETRIC\x10\x02b\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(RegisterPeer::generated_message_descriptor_data());
            messages.push(RegisterPeerResponse::generated_message_descriptor_data());
            messages.push(RegisterPk::generated_message_descriptor_data());
            messages.push(RegisterPkResponse::generated_message_descriptor_data());
            messages.push(PunchHole::generated_message_descriptor_data());
            messages.push(ConfigUpdate::generated_message_descriptor_data());
            messages.push(TestNatRequest::generated_message_descriptor_data());
            messages.push(TestNatResponse::generated_message_descriptor_data());
            messages.push(RendezvousMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(NatType::generated_enum_descriptor_data());
            enums.push(register_pk_response::Result::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
